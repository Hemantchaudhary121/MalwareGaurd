from flask import Flask, request, jsonify
import torch
from transformers import DistilBertForSequenceClassification, DistilBertTokenizerFast
from flask_cors import CORS
import fitz  # Import the PyMuPDF library
from pdf2image import convert_from_bytes
from pytesseract import image_to_string

app = Flask(__name__)
CORS(app)  # Allow all origins for testing purposes

# Set the upload folder for PDFs
UPLOAD_FOLDER = 'uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Load the model architecture and tokenizer
model_architecture = "distilbert-base-uncased"
tokenizer = DistilBertTokenizerFast.from_pretrained(model_architecture)

# Load the saved model weights
model = DistilBertForSequenceClassification.from_pretrained(model_architecture)
model.load_state_dict(torch.load("model_weights.pth", map_location=torch.device('cpu')))
model.eval()

@app.route('/')
def index():
    return "Welcome to the Flask Server!"

def extract_text_from_pdf(pdf_content):
    pdf_document = fitz.open(stream=pdf_content, filetype="pdf")
    text = ""
    for page_number in range(pdf_document.page_count):
        page = pdf_document[page_number]
        text += page.get_text()
    pdf_document.close()
    return text


@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = request.files.get('pdfFile')  # Get the uploaded PDF file

        print('Received PDF File:', data.filename)
        pdf_content = data.read()
        text_content = extract_text_from_pdf(pdf_content)
        print('Extracted Text:', text_content[:100])

        test_encoding = tokenizer(text_content, truncation=True, padding=True, return_tensors="pt")
        print('Tokenized input:', test_encoding)

        input_ids = torch.tensor(test_encoding["input_ids"])
        attention_mask = torch.tensor(test_encoding["attention_mask"])
        with torch.no_grad():
            outputs = model(input_ids, attention_mask=attention_mask)
        prediction = torch.argmax(outputs.logits).item()

        print('Prediction:', prediction)


        # Return the prediction as a JSON response
        response = jsonify({"prediction": prediction})
        return response
    except Exception as e:
        return jsonify({"error": str(e)})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
